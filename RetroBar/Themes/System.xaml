<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">

    <system:Double x:Key="TaskbarHeight">30</system:Double>
    <system:Double x:Key="TaskbarWidth">98</system:Double>
    <system:Double x:Key="TaskbarUnlockedSize">0</system:Double>
    <system:Double x:Key="TaskButtonWidth">160</system:Double>
    <system:Double x:Key="TaskButtonMinWidth">45</system:Double>
    <Thickness x:Key="TaskButtonMargin" Right="3" />
    <Thickness x:Key="TaskButtonVerticalMargin" />

    <SolidColorBrush x:Key="ButtonHighlight" Color="{x:Static SystemColors.ControlLightLightColor}" />
    <SolidColorBrush x:Key="ButtonInnerHighlight" Color="{x:Static SystemColors.ControlLightLightColor}" />
    <SolidColorBrush x:Key="ButtonLight" Color="{x:Static SystemColors.ControlLightColor}" />
    <SolidColorBrush x:Key="ButtonFace" Color="{x:Static SystemColors.ControlColor}" />
    <SolidColorBrush x:Key="ButtonShadow" Color="{x:Static SystemColors.ControlDarkColor}" />
    <SolidColorBrush x:Key="ButtonDarkShadow" Color="{x:Static SystemColors.ControlDarkDarkColor}" />
    <SolidColorBrush x:Key="ButtonFlashingFace" Color="{x:Static SystemColors.HighlightColor}" />

    <SolidColorBrush x:Key="ButtonForeground" Color="{x:Static SystemColors.ControlTextColor}" />
    <SolidColorBrush x:Key="ButtonFlashingForeground" Color="{x:Static SystemColors.HighlightTextColor}" />
    <SolidColorBrush x:Key="ClockForeground" Color="{x:Static SystemColors.ControlTextColor}" />

    <SolidColorBrush x:Key="ToolTipBackground" Color="{x:Static SystemColors.InfoColor}" />
    <SolidColorBrush x:Key="ToolTipForeground" Color="{x:Static SystemColors.InfoTextColor}" />

    <BitmapImage x:Key="StartIconImage"
                 UriSource="../Resources/start9x.png" />

    <BitmapImage x:Key="ShowDesktopIconImageSmall"
                 UriSource="../Resources/desktop95-sm.png" />
    <BitmapImage x:Key="ShowDesktopIconImageLarge"
                 UriSource="../Resources/desktop95-lg.png" />

    <Style x:Key="DefaultDirection">
        <Setter Property="Control.FlowDirection"
                        Value="LeftToRight" />
    </Style>

    <Style TargetType="MenuItem"
           x:Key="TaskManMenuItem">
        <Setter Property="Header"
                Value="{DynamicResource show_taskman_2k}" />
    </Style>

    <system:Double x:Key="GlobalFontSize">11</system:Double>

    <system:Boolean x:Key="AllowsTransparency">False</system:Boolean>
    <system:Boolean x:Key="InvertSystemNotifyIcons">False</system:Boolean>
    <system:Boolean x:Key="UseLargeIcons">False</system:Boolean>
    <system:Boolean x:Key="UseFloatingStartButton">False</system:Boolean>

    <Style x:Key="GlobalFonts">
        <Setter Property="Control.FontFamily"
                Value="{DynamicResource GlobalFontFamily}" />
        <Setter Property="Control.FontSize"
                Value="{DynamicResource GlobalFontSize}" />
    </Style>

    <Style TargetType="ToolTip"
           x:Key="{x:Type ToolTip}"
           BasedOn="{StaticResource GlobalFonts}">
        <Setter Property="Background"
                Value="{DynamicResource ToolTipBackground}" />
        <Setter Property="Foreground"
                Value="{DynamicResource ToolTipForeground}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource ToolTipForeground}" />
        <Setter Property="Padding"
                Value="2,1,2,1" />
    </Style>

    <Style TargetType="Window"
           x:Key="PropertiesWindow"
           BasedOn="{StaticResource GlobalFonts}">
        <Setter Property="UseLayoutRounding"
                Value="True" />
        <Setter Property="TextOptions.TextFormattingMode"
                Value="Display" />
        <Setter Property="Background"
                Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
    </Style>

    <Style TargetType="Window"
           x:Key="TaskbarWindow">
        <Setter Property="Background"
                Value="{DynamicResource ButtonFace}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=AppBarMode, RelativeSource={RelativeSource Mode=Self}}"
                         Value="AutoHide">
                <DataTrigger.Setters>
                    <Setter Property="Background"
                            Value="Transparent" />
                </DataTrigger.Setters>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Window"
           x:Key="FloatingStartButtonWindow">
        <Setter Property="UseLayoutRounding"
                Value="True" />
        <Setter Property="TextOptions.TextFormattingMode"
                Value="Display" />
        <Setter Property="Background"
                Value="Transparent" />
    </Style>

    <Style TargetType="ContentControl"
           x:Key="Taskbar">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TranslateTransform X="0"
                                    Y="0" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border BorderThickness="0,1,0,0"
                            BorderBrush="{DynamicResource ButtonLight}"
                            Name="OuterBorder">
                        <Border BorderThickness="0,1,0,0"
                                BorderBrush="{DynamicResource ButtonHighlight}"
                                Background="{DynamicResource ButtonFace}"
                                Name="InnerBorder">
                            <ContentPresenter />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=AppBarEdge, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                     Value="Left">
                            <DataTrigger.Setters>
                                <Setter TargetName="OuterBorder"
                                        Property="BorderBrush"
                                        Value="{DynamicResource ButtonDarkShadow}" />
                                <Setter TargetName="InnerBorder"
                                        Property="BorderBrush"
                                        Value="{DynamicResource ButtonShadow}" />
                                <Setter TargetName="OuterBorder"
                                        Property="BorderThickness"
                                        Value="0,0,1,0" />
                                <Setter TargetName="InnerBorder"
                                        Property="BorderThickness"
                                        Value="0,0,1,0" />
                            </DataTrigger.Setters>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=AppBarEdge, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                     Value="Right">
                            <DataTrigger.Setters>
                                <Setter TargetName="OuterBorder"
                                        Property="BorderThickness"
                                        Value="1,0,0,0" />
                                <Setter TargetName="InnerBorder"
                                        Property="BorderThickness"
                                        Value="1,0,0,0" />
                            </DataTrigger.Setters>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=AppBarEdge, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                     Value="Top">
                            <DataTrigger.Setters>
                                <Setter TargetName="OuterBorder"
                                        Property="BorderBrush"
                                        Value="{DynamicResource ButtonDarkShadow}" />
                                <Setter TargetName="InnerBorder"
                                        Property="BorderBrush"
                                        Value="{DynamicResource ButtonShadow}" />
                                <Setter TargetName="OuterBorder"
                                        Property="BorderThickness"
                                        Value="0,0,0,1" />
                                <Setter TargetName="InnerBorder"
                                        Property="BorderThickness"
                                        Value="0,0,0,1" />
                            </DataTrigger.Setters>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="GroupBox"
           x:Key="Tray">
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="GroupBox">
                    <Border BorderThickness="0"
                            Padding="2">
                        <Border BorderThickness="0,0,1,1"
                                BorderBrush="{DynamicResource ButtonHighlight}">
                            <Border BorderThickness="1,1,0,0"
                                    BorderBrush="{DynamicResource ButtonShadow}"
                                    Background="{DynamicResource ButtonFace}"
                                    Padding="2">
                                <ContentPresenter />
                            </Border>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button"
           x:Key="TaskButton">
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="Background"
                Value="{DynamicResource ButtonFace}" />
        <Setter Property="Foreground"
                Value="{DynamicResource ButtonForeground}" />
        <Setter Property="Margin"
                Value="{DynamicResource TaskButtonMargin}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent"
                            Padding="0,2"
                            Name="ButtonBorder">
                        <Border BorderThickness="0,0,1,1"
                                BorderBrush="{DynamicResource ButtonDarkShadow}"
                                x:Name="ButtonOuterBottomBorder">
                            <Border BorderThickness="1,1,0,0"
                                    BorderBrush="{DynamicResource ButtonHighlight}"
                                    x:Name="ButtonOuterTopBorder">
                                <Border BorderThickness="0,0,1,1"
                                        BorderBrush="{DynamicResource ButtonShadow}"
                                        x:Name="ButtonInnerBottomBorder">
                                    <Border BorderThickness="1,1,0,0"
                                            BorderBrush="{DynamicResource ButtonLight}"
                                            Background="{TemplateBinding Background}"
                                            Padding="2,1"
                                            x:Name="ButtonInnerTopBorder">
                                        <ContentPresenter />
                                    </Border>
                                </Border>
                            </Border>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                     Value="Vertical">
                            <DataTrigger.Setters>
                                <Setter TargetName="ButtonBorder"
                                        Property="Padding"
                                        Value="2,1" />
                            </DataTrigger.Setters>
                        </DataTrigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="ButtonOuterBottomBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonHighlight}" />
                            <Setter TargetName="ButtonOuterTopBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonDarkShadow}" />
                            <Setter TargetName="ButtonInnerBottomBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonLight}" />
                            <Setter TargetName="ButtonInnerTopBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonShadow}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                         Value="Vertical">
                <DataTrigger.Setters>
                    <Setter Property="Margin"
                            Value="{DynamicResource TaskButtonVerticalMargin}" />
                </DataTrigger.Setters>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button"
           x:Key="TaskButtonActive"
           BasedOn="{StaticResource TaskButton}">
        <Setter Property="FontWeight"
                Value="Bold" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent"
                            Padding="0,2"
                            Name="ButtonBorder">
                        <Border BorderThickness="0,0,1,1"
                                BorderBrush="{DynamicResource ButtonHighlight}">
                            <Border BorderThickness="1,1,0,0"
                                    BorderBrush="{DynamicResource ButtonDarkShadow}">
                                <Border BorderThickness="0,0,1,1"
                                        BorderBrush="{DynamicResource ButtonLight}">
                                    <Border BorderThickness="1,1,0,0"
                                            BorderBrush="{DynamicResource ButtonShadow}">
                                        <Border Background="{DynamicResource CheckeredBackground}">
                                            <Border BorderThickness="0,1,0,0"
                                                    Padding="2,1,2,0"
                                                    BorderBrush="{DynamicResource ButtonInnerHighlight}">
                                                <ContentPresenter />
                                            </Border>
                                        </Border>
                                    </Border>
                                </Border>
                            </Border>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                     Value="Vertical">
                            <DataTrigger.Setters>
                                <Setter TargetName="ButtonBorder"
                                        Property="Padding"
                                        Value="2,1" />
                            </DataTrigger.Setters>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DrawingBrush x:Key="CheckeredBackground" TileMode="Tile" Viewport="0,0,2,2" ViewportUnits="Absolute">
        <DrawingBrush.Drawing>
            <GeometryDrawing Geometry="M2,0 H1 V1 H0 V2 H1 V1 H2Z" Brush="{DynamicResource ButtonHighlight}" />
        </DrawingBrush.Drawing>
    </DrawingBrush>

    <DrawingBrush x:Key="CheckeredBackgroundAlt" TileMode="Tile" Viewport="0,0,2,2" ViewportUnits="Absolute">
        <DrawingBrush.Drawing>
            <GeometryDrawing Geometry="M0,0 H1 V1 H2 V2 H1 V1 H0Z" Brush="{DynamicResource ButtonHighlight}" />
        </DrawingBrush.Drawing>
    </DrawingBrush>

    <Style TargetType="Button"
           x:Key="TaskButtonFlashing"
           BasedOn="{StaticResource TaskButton}">
        <Setter Property="Background"
                Value="{DynamicResource ButtonFlashingFace}" />
        <Setter Property="Foreground"
                Value="{DynamicResource ButtonFlashingForeground}" />
    </Style>

    <Style TargetType="ContentControl"
           x:Key="TaskButtonThumbnail">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Border BorderThickness="0,0,1,1"
                            BorderBrush="{DynamicResource ButtonDarkShadow}"
                            Margin="4">
                        <Border BorderThickness="1,1,0,0"
                                BorderBrush="{DynamicResource ButtonHighlight}">
                            <Border BorderThickness="0,0,1,1"
                                    BorderBrush="{DynamicResource ButtonShadow}">
                                <Border BorderThickness="1,1,0,0"
                                        BorderBrush="{DynamicResource ButtonLight}"
                                        Background="{DynamicResource ButtonFace}"
                                        Padding="3">
                                    <ContentPresenter />
                                </Border>
                            </Border>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TaskListScrollButton"
           TargetType="RepeatButton">
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="Background"
                Value="{DynamicResource ButtonFace}" />
        <Setter Property="Foreground"
                Value="{DynamicResource ButtonForeground}" />
        <Setter Property="TextOptions.TextRenderingMode"
                Value="Aliased" />
        <Setter Property="TextOptions.TextFormattingMode"
                Value="Display" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border BorderThickness="0,0,1,1"
                            BorderBrush="{DynamicResource ButtonDarkShadow}"
                            x:Name="ButtonOuterBottomBorder">
                        <Border BorderThickness="1,1,0,0"
                                BorderBrush="{DynamicResource ButtonHighlight}"
                                x:Name="ButtonOuterTopBorder">
                            <Border BorderThickness="0,0,1,1"
                                    BorderBrush="{DynamicResource ButtonShadow}"
                                    x:Name="ButtonInnerBottomBorder">
                                <Border BorderThickness="1,1,0,0"
                                        BorderBrush="{DynamicResource ButtonLight}"
                                        Background="{TemplateBinding Background}"
                                        Padding="4,0"
                                        x:Name="ButtonInnerTopBorder">
                                    <ContentPresenter HorizontalAlignment="Center"
                                                      Margin="0,-5,0,-3" />
                                </Border>
                            </Border>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="ButtonOuterBottomBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonHighlight}" />
                            <Setter TargetName="ButtonOuterTopBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonDarkShadow}" />
                            <Setter TargetName="ButtonInnerBottomBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonLight}" />
                            <Setter TargetName="ButtonInnerTopBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonShadow}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TaskListScrollButtonText"
           TargetType="TextBlock">
        <Setter Property="FontFamily"
                Value="Webdings" />
        <Setter Property="FontSize"
                Value="9" />
    </Style>

    <Style x:Key="TaskListScrollButtonGrid"
           TargetType="Grid">
        <Setter Property="Margin"
                Value="1,2" />
    </Style>

    <Style x:Key="TaskListScrollViewer"
           TargetType="ScrollViewer">
        <Setter Property="Margin"
                Value="4,0,0,0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <ScrollContentPresenter Grid.Column="0"
                                                Width="{TemplateBinding Width}"
                                                Height="{TemplateBinding Height}"
                                                CanContentScroll="{TemplateBinding CanContentScroll}"
                                                Content="{TemplateBinding Content}" />
                        <Grid Grid.Column="1"
                              Style="{DynamicResource TaskListScrollButtonGrid}"
                              Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <RepeatButton Command="ScrollBar.PageUpCommand"
                                          Style="{DynamicResource TaskListScrollButton}"
                                          Grid.Row="0">
                                <TextBlock Style="{DynamicResource TaskListScrollButtonText}">5</TextBlock>
                            </RepeatButton>
                            <RepeatButton Command="ScrollBar.PageDownCommand"
                                          Style="{DynamicResource TaskListScrollButton}"
                                          Grid.Row="1">
                                <TextBlock Style="{DynamicResource TaskListScrollButtonText}">6</TextBlock>
                            </RepeatButton>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                         Value="Vertical">
                <DataTrigger.Setters>
                    <Setter Property="Margin"
                            Value="0,3,0,0" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="*" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <ScrollContentPresenter Grid.Row="0"
                                                            Width="{TemplateBinding Width}"
                                                            Height="{TemplateBinding Height}"
                                                            CanContentScroll="{TemplateBinding CanContentScroll}"
                                                            Content="{TemplateBinding Content}" />
                                    <Grid Grid.Row="1"
                                          Style="{DynamicResource TaskListScrollButtonGrid}"
                                          Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <RepeatButton Command="ScrollBar.PageUpCommand"
                                                      Style="{DynamicResource TaskListScrollButton}"
                                                      Grid.Column="0">
                                            <TextBlock Style="{DynamicResource TaskListScrollButtonText}">5</TextBlock>
                                        </RepeatButton>
                                        <RepeatButton Command="ScrollBar.PageDownCommand"
                                                      Style="{DynamicResource TaskListScrollButton}"
                                                      Grid.Column="1">
                                            <TextBlock Style="{DynamicResource TaskListScrollButtonText}">6</TextBlock>
                                        </RepeatButton>
                                    </Grid>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger.Setters>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TaskListWrapPanel"
           TargetType="WrapPanel">
    </Style>

    <Style x:Key="ClassicFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle RenderOptions.EdgeMode="Aliased" Margin="5,5,3,5" StrokeThickness="1"
                               Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                               StrokeDashOffset="1.5" StrokeDashArray="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ToolTip x:Key="StartButtonTip" Content="{DynamicResource start_button_tip}" />
    <ToolTip x:Key="ShowDesktopButtonTip" Content="{DynamicResource show_desktop_tip}" />
    <Style TargetType="MenuItem"
           x:Key="ShowDesktopItem">
        <Setter Property="Header"
                Value="{DynamicResource show_desktop}" />
        <Setter Property="FontWeight"
                Value="Bold" />
    </Style>

    <Style TargetType="ToggleButton"
           x:Key="StartButton">
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="Background"
                Value="{DynamicResource ButtonFace}" />
        <Setter Property="Foreground"
                Value="{DynamicResource ButtonForeground}" />
        <Setter Property="HorizontalAlignment"
                Value="Left" />
        <Setter Property="BorderThickness"
                Value="0,0,1,1" />
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="Transparent"
                            x:Name="ButtonPaddingBorder"
                            Padding="2,2,0,2">
                        <Border BorderThickness="{TemplateBinding BorderThickness}"
                                BorderBrush="{DynamicResource ButtonDarkShadow}"
                                x:Name="ButtonOuterBottomBorder">
                            <Border BorderThickness="1,1,0,0"
                                    BorderBrush="{DynamicResource ButtonHighlight}"
                                    x:Name="ButtonOuterTopBorder">
                                <Border BorderThickness="0,0,1,1"
                                        BorderBrush="{DynamicResource ButtonShadow}"
                                        x:Name="ButtonInnerBottomBorder">
                                    <Border BorderThickness="1,1,0,0"
                                            BorderBrush="{DynamicResource ButtonLight}"
                                            Background="{TemplateBinding Background}"
                                            Padding="2,1"
                                            x:Name="ButtonInnerTopBorder">
                                        <ContentPresenter Name="Content" />
                                    </Border>
                                </Border>
                            </Border>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="True">
                            <Setter TargetName="ButtonOuterBottomBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonHighlight}" />
                            <Setter TargetName="ButtonOuterTopBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonDarkShadow}" />
                            <Setter TargetName="ButtonInnerBottomBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonLight}" />
                            <Setter TargetName="ButtonInnerTopBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonShadow}" />
                            <Setter TargetName="Content"
                                    Property="Margin"
                                    Value="1,1,-1,-1" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="ButtonOuterBottomBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonHighlight}" />
                            <Setter TargetName="ButtonOuterTopBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonDarkShadow}" />
                            <Setter TargetName="ButtonInnerBottomBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonLight}" />
                            <Setter TargetName="ButtonInnerTopBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonShadow}" />
                            <Setter TargetName="Content"
                                    Property="Margin"
                                    Value="1,1,-1,-1" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                     Value="Vertical">
                            <DataTrigger.Setters>
                                <Setter TargetName="ButtonPaddingBorder"
                                        Property="Padding"
                                        Value="2,2,2,0" />
                            </DataTrigger.Setters>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="ToggleButton"
           x:Key="ShowDesktopButton">
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="HorizontalAlignment"
                Value="Center" />
        <Setter Property="Margin"
                Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="Transparent"
                            Padding="0,2,2,2"
                            Name="ButtonBorder">
                        <Border BorderThickness="0,0,1,1"
                                BorderBrush="{TemplateBinding Background}"
                                x:Name="ButtonRightBottomBorder">
                            <Border BorderThickness="1,1,0,0"
                                    BorderBrush="{TemplateBinding Background}"
                                    x:Name="ButtonLeftTopBorder">
                                <Border BorderThickness="1"
                                        BorderBrush="Transparent"
                                        Background="{TemplateBinding Background}"
                                        Padding="2,1">
                                    <ContentPresenter Name="Content" />
                                </Border>
                            </Border>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                     Value="Vertical">
                            <DataTrigger.Setters>
                                <Setter TargetName="ButtonBorder"
                                        Property="Padding"
                                        Value="0,0,0,2" />
                            </DataTrigger.Setters>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="ButtonLeftTopBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonHighlight}" />
                            <Setter TargetName="ButtonRightBottomBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonShadow}" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                                 Value="True">
                            <Setter Property="Background"
                                    Value="{DynamicResource CheckeredBackground}" />
                            <Setter TargetName="ButtonRightBottomBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonHighlight}" />
                            <Setter TargetName="ButtonLeftTopBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonShadow}" />
                            <Setter TargetName="Content"
                                    Property="Margin"
                                    Value="1,1,-1,-1" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="ButtonRightBottomBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonHighlight}" />
                            <Setter TargetName="ButtonLeftTopBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonShadow}" />
                            <Setter TargetName="Content"
                                    Property="Margin"
                                    Value="1,1,-1,-1" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked"
                                           Value="True" />
                                <Condition Property="IsMouseOver"
                                           Value="True" />
                                <Condition Property="IsPressed"
                                           Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="ButtonLeftTopBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonHighlight}" />
                            <Setter TargetName="ButtonRightBottomBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonShadow}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Image"
           x:Key="TaskIcon"
           BasedOn="{StaticResource DefaultDirection}">
        <Setter Property="Width"
                Value="16" />
        <Setter Property="Height"
                Value="16" />
        <Setter Property="Margin"
                Value="0,0,3,0" />
    </Style>

    <Style TargetType="Image"
           x:Key="StartIcon"
           BasedOn="{StaticResource TaskIcon}">
        <Setter Property="Margin"
                Value="0,0,2,0" />
        <Setter Property="Source"
                Value="{DynamicResource StartIconImage}" />
    </Style>

    <Style TargetType="Image"
           x:Key="ShowDesktopIcon"
           BasedOn="{StaticResource TaskIcon}">
        <Setter Property="Margin"
                Value="-1,0,0,0" />
        <Setter Property="Source"
                Value="{DynamicResource ShowDesktopIconImageSmall}" />
    </Style>

    <Style TargetType="Image"
           x:Key="NotifyIcon"
           BasedOn="{StaticResource TaskIcon}">
        <Setter Property="Margin"
                Value="0,0,4,0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                         Value="Vertical">
                <DataTrigger.Setters>
                    <Setter Property="Margin"
                            Value="2,1" />
                </DataTrigger.Setters>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TextBlock"
           x:Key="TaskLabel"
           BasedOn="{StaticResource GlobalFonts}">
        <Setter Property="TextTrimming"
                Value="CharacterEllipsis" />
        <Setter Property="HorizontalAlignment"
                Value="Stretch" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="Margin"
                Value="0,-1,1,0" />
    </Style>

    <Style TargetType="TextBlock"
           x:Key="StartLabel"
           BasedOn="{StaticResource TaskLabel}">
        <Setter Property="Text"
                Value="{DynamicResource start_text}" />
        <Setter Property="FontWeight"
                Value="Bold" />
        <Setter Property="TextOptions.TextRenderingMode"
                Value="Auto" />
    </Style>

    <Style TargetType="TextBlock"
           x:Key="Clock"
           BasedOn="{StaticResource GlobalFonts}">
        <Setter Property="TextOptions.TextRenderingMode"
                Value="Auto" />
        <Setter Property="Foreground"
                Value="{DynamicResource ClockForeground}" />
        <Setter Property="Margin"
                Value="8,0" />
        <Setter Property="TextAlignment"
                Value="Center" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                         Value="Vertical">
                <DataTrigger.Setters>
                    <Setter Property="Margin"
                            Value="0,3" />
                </DataTrigger.Setters>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate TargetType="{x:Type UserControl}"
                     x:Key="ClockTemplateKey">
        <TextBlock Style="{DynamicResource Clock}"
                   Text="{Binding Path=Now, StringFormat=t, Mode=OneWay}"
                   Name="ClockText">
        </TextBlock>
    </ControlTemplate>

    <Style TargetType="Button"
           x:Key="ToolbarButton">
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="Background"
                Value="{DynamicResource ButtonFace}" />
        <Setter Property="Margin"
                Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent"
                            Padding="0,2"
                            Name="ButtonBorder">
                        <Border BorderThickness="0,0,1,1"
                                BorderBrush="{TemplateBinding Background}"
                                x:Name="ButtonRightBottomBorder">
                            <Border BorderThickness="1,1,0,0"
                                    BorderBrush="{TemplateBinding Background}"
                                    Background="{TemplateBinding Background}"
                                    Padding="2"
                                    x:Name="ButtonLeftTopBorder">
                                <ContentPresenter />
                            </Border>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                     Value="Vertical">
                            <DataTrigger.Setters>
                                <Setter TargetName="ButtonBorder"
                                        Property="Padding"
                                        Value="0" />
                            </DataTrigger.Setters>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="ButtonLeftTopBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonHighlight}" />
                            <Setter TargetName="ButtonRightBottomBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonShadow}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="ButtonRightBottomBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonHighlight}" />
                            <Setter TargetName="ButtonLeftTopBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonShadow}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Image"
           x:Key="ToolbarIcon"
           BasedOn="{StaticResource TaskIcon}">
        <Setter Property="Margin"
                Value="0,0,1,0" />
    </Style>

    <Style TargetType="ItemsControl"
           x:Key="ToolbarItems">
        <Setter Property="HorizontalAlignment"
                Value="Stretch" />
        <Setter Property="Margin"
                Value="4,0,0,0" />
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsLocked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                               Value="False" />
                    <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                               Value="Vertical" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin"
                            Value="2,4" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=IsLocked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                               Value="True" />
                    <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                               Value="Vertical" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Margin"
                            Value="2,4,2,0" />
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Thumb"
           x:Key="ToolbarThumb">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="Margin"
                Value="2,2,0,2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border BorderThickness="1,0,0,0"
                            BorderBrush="{DynamicResource ButtonShadow}"
                            x:Name="OuterBorder1"
                            SnapsToDevicePixels="True">
                        <Border BorderThickness="1,0,0,0"
                                BorderBrush="{DynamicResource ButtonHighlight}"
                                x:Name="OuterBorder2">
                            <Border BorderThickness="0,0,1,1"
                                    BorderBrush="{DynamicResource ButtonShadow}"
                                    HorizontalAlignment="Left"
                                    Margin="2,2,0,2"
                                    x:Name="OuterNub"
                                    Width="3">
                                <Border BorderThickness="1,1,0,0"
                                        BorderBrush="{DynamicResource ButtonHighlight}">
                                    
                                </Border>
                            </Border>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                     Value="Vertical">
                            <DataTrigger.Setters>
                                <Setter TargetName="OuterBorder1"
                                        Property="BorderThickness"
                                        Value="0,1,0,0" />
                                <Setter TargetName="OuterBorder2"
                                        Property="BorderThickness"
                                        Value="0,1,0,0" />
                                <Setter TargetName="OuterNub"
                                        Property="Margin"
                                        Value="2,2,2,0" />
                                <Setter TargetName="OuterNub"
                                        Property="Height"
                                        Value="3" />
                                <Setter TargetName="OuterNub"
                                        Property="HorizontalAlignment"
                                        Value="Stretch" />
                                <Setter TargetName="OuterNub"
                                        Property="Width"
                                        Value="Auto" />
                            </DataTrigger.Setters>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsLocked, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                         Value="True">
                <Setter Property="Visibility"
                        Value="Collapsed" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                         Value="Vertical">
                <Setter Property="Margin"
                        Value="2,1,2,0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="ToggleButton"
           x:Key="TrayToggleButton">
        <Setter Property="OverridesDefaultStyle"
                Value="True" />
        <Setter Property="Background"
                Value="{DynamicResource ButtonFace}" />
        <Setter Property="Margin"
                Value="-2,-3,1,-3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border Background="Transparent"
                            Padding="0,2"
                            Name="ButtonBorder">
                        <Border BorderThickness="0,0,1,1"
                                BorderBrush="{TemplateBinding Background}"
                                x:Name="ButtonRightBottomBorder">
                            <Border BorderThickness="1,1,0,0"
                                    BorderBrush="{TemplateBinding Background}"
                                    Background="{TemplateBinding Background}"
                                    x:Name="ButtonLeftTopBorder">
                                <StackPanel Orientation="Horizontal"
                                            Height="6"
                                            VerticalAlignment="Center"
                                            Margin="3,2,3,0"
                                            Name="ArrowPanel">
                                    <Path Fill="{DynamicResource ButtonForeground}"
                                          Data="M 0,2.5 L 2,5 L 4.5,5 L 2,2.5 L 4.5,0 L 2,0 Z"
                                          RenderOptions.EdgeMode="Aliased" />
                                    <Path Fill="{DynamicResource ButtonForeground}"
                                          Data="M 0,2.5 L 2,5 L 4.5,5 L 2,2.5 L 4.5,0 L 2,0 Z"
                                          RenderOptions.EdgeMode="Aliased" />
                                </StackPanel>
                            </Border>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}"
                                           Value="True" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                                           Value="Vertical" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="ArrowPanel"
                                        Property="RenderTransformOrigin"
                                        Value="0.5,0.5" />
                                <Setter TargetName="ArrowPanel"
                                        Property="RenderTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="-90"></RotateTransform>
                                    </Setter.Value>
                                </Setter>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}"
                                           Value="False" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                                           Value="Vertical" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="ArrowPanel"
                                        Property="RenderTransformOrigin"
                                        Value="0.5,0.5" />
                                <Setter TargetName="ArrowPanel"
                                        Property="RenderTransform">
                                    <Setter.Value>
                                        <RotateTransform Angle="90"></RotateTransform>
                                    </Setter.Value>
                                </Setter>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                     Value="Vertical">
                            <DataTrigger.Setters>
                                <Setter TargetName="ButtonBorder"
                                        Property="Padding"
                                        Value="2,0" />
                                <Setter TargetName="ArrowPanel"
                                        Property="HorizontalAlignment"
                                        Value="Center" />
                                <Setter TargetName="ArrowPanel"
                                        Property="Margin"
                                        Value="0,2,0,6" />
                            </DataTrigger.Setters>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="ButtonLeftTopBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonHighlight}" />
                            <Setter TargetName="ButtonRightBottomBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonShadow}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="ButtonRightBottomBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonHighlight}" />
                            <Setter TargetName="ButtonLeftTopBorder"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonShadow}" />
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}"
                                           Value="True" />
                                <Condition Binding="{Binding Path=Orientation, RelativeSource={RelativeSource FindAncestor, AncestorType=Window}}"
                                           Value="Horizontal" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="ArrowPanel"
                                        Property="RenderTransformOrigin"
                                        Value="0.5,0.5" />
                                <Setter TargetName="ArrowPanel"
                                        Property="RenderTransform">
                                    <Setter.Value>
                                        <ScaleTransform ScaleX="-1"></ScaleTransform>
                                    </Setter.Value>
                                </Setter>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="ToolTip" Value="{DynamicResource hide}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="ToolTip" Value="{DynamicResource show_hidden}" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                         Value="Vertical">
                <DataTrigger.Setters>
                    <Setter Property="Margin"
                            Value="-3,-2,-3,0" />
                </DataTrigger.Setters>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Popup"
           x:Key="NotifyBalloonPopup">
        <Setter Property="AllowsTransparency"
                Value="True" />
        <Setter Property="StaysOpen"
                Value="True" />
        <Setter Property="PopupAnimation"
                Value="Fade" />
        <Setter Property="HorizontalOffset"
                Value="11" />
        <Setter Property="VerticalOffset"
                Value="5" />
        <Setter Property="MaxWidth"
                Value="300" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=AppBarEdge, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                         Value="Left">
                <DataTrigger.Setters>
                    <Setter Property="HorizontalOffset"
                            Value="-1" />
                    <Setter Property="VerticalOffset"
                            Value="5" />
                </DataTrigger.Setters>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=AppBarEdge, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                         Value="Right">
                <DataTrigger.Setters>
                    <Setter Property="HorizontalOffset"
                            Value="12" />
                    <Setter Property="VerticalOffset"
                            Value="5" />
                </DataTrigger.Setters>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=AppBarEdge, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                         Value="Top">
                <DataTrigger.Setters>
                    <Setter Property="HorizontalOffset"
                            Value="11" />
                    <Setter Property="VerticalOffset"
                            Value="-5" />
                </DataTrigger.Setters>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Image"
           x:Key="NotifyBalloonIcon"
           BasedOn="{StaticResource TaskIcon}">
        <Setter Property="Margin"
                Value="0,0,8,0" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=Icon}"
                         Value="{x:Null}">
                <DataTrigger.Setters>
                    <Setter Property="Visibility"
                            Value="Collapsed" />
                </DataTrigger.Setters>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TextBlock"
           x:Key="NotifyBalloonTitle"
           BasedOn="{StaticResource GlobalFonts}">
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="FontWeight"
                Value="Bold" />
        <Setter Property="TextTrimming"
                Value="CharacterEllipsis" />
        <Setter Property="TextWrapping"
                Value="NoWrap" />
    </Style>

    <Style TargetType="TextBlock"
           x:Key="NotifyBalloonInfo"
           BasedOn="{StaticResource GlobalFonts}">
        <Setter Property="Margin"
                Value="0,6,0,0" />
        <Setter Property="TextWrapping"
                Value="Wrap" />
    </Style>

    <Style TargetType="Button"
           x:Key="NotifyBalloonCloseButton"
           BasedOn="{StaticResource GlobalFonts}">
        <Setter Property="HorizontalAlignment"
                Value="Right" />
        <Setter Property="VerticalAlignment"
                Value="Center" />
        <Setter Property="Margin"
                Value="9,-4,-7,0" />
        <Setter Property="Height"
                Value="18" />
        <Setter Property="Width"
                Value="18" />
        <Setter Property="FontFamily"
                Value="Marlett" />
        <Setter Property="FontSize"
                Value="13" />
        <Setter Property="TextOptions.TextRenderingMode"
                Value="Aliased" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource ButtonShadow}" />
        <Setter Property="Background"
                Value="{DynamicResource ButtonFace}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          Name="Content"
                                          Margin="0,1,0,0"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="Content"
                                    Property="Margin"
                                    Value="1,2,0,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ContentControl"
           x:Key="NotifyBalloon"
           BasedOn="{StaticResource GlobalFonts}">
        <Setter Property="Foreground"
                Value="{DynamicResource ToolTipForeground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <DockPanel>
                        <Border BorderThickness="1"
                                BorderBrush="{DynamicResource ToolTipForeground}"
                                Background="{DynamicResource ToolTipBackground}"
                                CornerRadius="8"
                                DockPanel.Dock="Top"
                                Name="Border">
                            <ContentPresenter Margin="11,6,11,9" />
                        </Border>
                        <Path Stroke="{DynamicResource ToolTipForeground}"
                              Fill="{DynamicResource ToolTipBackground}"
                              HorizontalAlignment="Right"
                              Width="21"
                              Height="21"
                              StrokeThickness="1"
                              Margin="13,-1,13,0"
                              Data="M 0,0 l 20,20 V 0"
                              DockPanel.Dock="Bottom"
                              RenderOptions.EdgeMode="Aliased"
                              Visibility="Visible"
                              Name="Arrow" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=AppBarEdge, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                           Value="Left" />
                                <Condition Binding="{Binding Path=FlowDirection, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                           Value="LeftToRight" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="Arrow"
                                        Property="Data"
                                        Value="M 0,0 V 20 l 20,-20" />
                                <Setter TargetName="Arrow"
                                        Property="HorizontalAlignment"
                                        Value="Left" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=AppBarEdge, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                           Value="Right" />
                                <Condition Binding="{Binding Path=FlowDirection, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                           Value="RightToLeft" />
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="Arrow"
                                        Property="Data"
                                        Value="M 0,0 V 20 l 20,-20" />
                                <Setter TargetName="Arrow"
                                        Property="HorizontalAlignment"
                                        Value="Left" />
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding Path=AppBarEdge, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                     Value="Top">
                            <DataTrigger.Setters>
                                <Setter TargetName="Border"
                                        Property="DockPanel.Dock"
                                        Value="Bottom" />
                                <Setter TargetName="Arrow"
                                        Property="Data"
                                        Value="M 0,20 l 20,-20 v 20" />
                                <Setter TargetName="Arrow"
                                        Property="DockPanel.Dock"
                                        Value="Top" />
                                <Setter TargetName="Arrow"
                                        Property="Margin"
                                        Value="13,0,13,-2" />
                            </DataTrigger.Setters>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>